package example.com.moviesfragment;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.widget.Toast;import java.util.HashMap;import java.util.List;import example.com.moviesfragment.gson.Data;import example.com.moviesfragment.gson.Example;import example.com.moviesfragment.gson.Movie;import example.com.moviesfragment.gson.Torrent;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class StarterActivity extends Activity {    public MoviesDataSource moviesDataSource;    long resultId;    int currentPage;    YtsApi ytsApi;    public int totalPages;    public static final String LOG = StarterActivity.class.getSimpleName();    int movieCount;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        moviesDataSource = new MoviesDataSource(this);        moviesDataSource.open();        setContentView(R.layout.activity_starter);        if ((moviesDataSource.getAllMovies().size() == 0) && !isNetworkAvailable()) {            Toast.makeText(StarterActivity.this, "Turn On Wifi to get movies", Toast.LENGTH_LONG).show();        } else {            ytsApi = ApiClient.getClient().create(YtsApi.class);            loadPages(currentPage);            ;            Handler handler = new Handler();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    totalPages = movieCount / 50;                    if (totalPages % 50 != 0)                        totalPages++;                    while (currentPage < totalPages) {                        currentPage++;                        loadPages(currentPage);                    }                }            }, 1000);            Intent intent = new Intent(this, MainActivity.class);            startActivity(intent);            finish();        }    }    private void loadPages(int actualPage) {        Call<Example> call = ytsApi.getExampleCall(50, actualPage);        call.enqueue(new Callback<Example>() {            @Override            public void onResponse(Call<Example> call, retrofit2.Response<Example> response) {                fetchResults(response);            }            @Override            public void onFailure(Call<Example> call, Throwable t) {            }        });    }    private void fetchResults(Response<Example> response) {        Data data = response.body().getData();        List<Movie> movies = data.getMovies();        movieCount = data.getMovieCount();        Log.v(LOG, "movie count " + movieCount);        for (Movie movie : movies) {            HashMap<String, String> torrentMap = new HashMap<>();            HashMap<String, String> hashMap = new HashMap<>();            List<Torrent> torrents = movie.getTorrents();            StringBuilder gen = new StringBuilder();            int id = movie.getId();            String title = movie.getTitle();            String summary = movie.getSummary();            int year = movie.getYear();            String mediumImage = movie.getMediumCoverImage();            double rating = movie.getRating();            String trailerCode = movie.getYtTrailerCode();            List<String> genre = movie.getGenres();            for (String s : genre) {                gen.append(s);            }            if (torrents != null)                for (Torrent torrent : torrents) {                    String quality = torrent.getQuality();                    String hash = torrent.getHash();                    torrentMap.put(quality, torrent.getUrl());                    hashMap.put(quality, hash);                }            resultId = moviesDataSource.createMovie(id, title, summary, year, mediumImage, rating, trailerCode, gen.toString(), torrentMap, hashMap);        }    }    private boolean isNetworkAvailable() {        ConnectivityManager connectivityManager                = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();        return activeNetworkInfo != null && activeNetworkInfo.isConnected();    }}