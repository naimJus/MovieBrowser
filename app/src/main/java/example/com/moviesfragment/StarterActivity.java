package example.com.moviesfragment;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.os.Handler;import android.os.Process;import android.support.v4.app.DialogFragment;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.ProgressBar;import android.widget.TextView;import java.util.List;import example.com.moviesfragment.gson.Data;import example.com.moviesfragment.gson.Example;import example.com.moviesfragment.gson.Movie;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class StarterActivity extends AppCompatActivity {    public static final String LOG = StarterActivity.class.getSimpleName();    public MoviesDataSource moviesDataSource;    public int totalPages;    long resultId;    int currentPage;    YtsApi ytsApi;    int movieCount;    TextView progressBarTV;    private ProgressBar progressBar;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        moviesDataSource = new MoviesDataSource(this);        moviesDataSource.open();        setContentView(R.layout.activity_starter);        progressBar = (ProgressBar) findViewById(R.id.progressBar1);        progressBarTV = (TextView) findViewById(R.id.progressBarTextView);/** Checks if there is a internet access* if there is it will run a retrofit request* if there's not it will ask the user to get internet access for the database to be updated or populated.* */        if ((moviesDataSource.getAllMovies().size() == 0) && !isNetworkAvailable()) {            DialogFragment dialogFragment = new InternetUnavailableFragment();            dialogFragment.show(getSupportFragmentManager(), "KEY");        } else {            ytsApi = ApiClient.getClient().create(YtsApi.class);            fetchMovies(currentPage);            internetAvailable();        }    }    @Override    protected void onRestart() {        super.onRestart();        Log.v(LOG, "onRestart() called ");        if ((moviesDataSource.getAllMovies().size() == 0) && isNetworkAvailable()) {            ytsApi = ApiClient.getClient().create(YtsApi.class);            fetchMovies(currentPage);            internetAvailable();        } else {            DialogFragment dialogFragment = new InternetUnavailableFragment();            dialogFragment.show(getSupportFragmentManager(), "KEY");        }    }    private void fetchMovies(int actualPage) {        Call<Example> call = ytsApi.getExampleCall(50, actualPage);        call.enqueue(new Callback<Example>() {            @Override            public void onResponse(Call<Example> call, retrofit2.Response<Example> response) {                responseToDb(response);            }            @Override            public void onFailure(Call<Example> call, Throwable t) {            }        });    }    // Parsing response    private void responseToDb(Response<Example> response) {        Data data;        if (response.body() != null) {            data = response.body().getData();            List<Movie> movies = data.getMovies();            movieCount = data.getMovieCount();            for (Movie movie : movies) {                resultId = moviesDataSource.createMovie(movie);            }        } else {            DialogFragment dialogFragment = new ServerDownFragment();            dialogFragment.show(getSupportFragmentManager(), "KEY");            return;        }    }    private boolean isNetworkAvailable() {        ConnectivityManager connectivityManager                = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();        return activeNetworkInfo != null && activeNetworkInfo.isConnected();    }    @Override    protected void onStop() {        super.onStop();        Log.v(MoviesListFragment.TAG, "StarterActivity onStop");    }    @Override    protected void onDestroy() {        super.onDestroy();        Log.v(MoviesListFragment.TAG, "StarterActivity onDestroy");    }    /*    * Creates a handler object with a time delay of 1000 millis    * so the equation of how many pages are available doesn't run immediately    * if it runs immediately the result will be 0 pages because the response for total pages is still 0    * while currentPage is smaller then totalPages the fetchMovies method will run and it will receive only one argument the currentPage    *The api contains >160 Pages the method loops through all tha pages of the requests    *and for each page calls the fetchResult() method which takes only one argument,    *the response for that actual page.    */    private void internetAvailable() {        Handler handler = new Handler();        handler.postDelayed(() -> {            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);            totalPages = movieCount / 50;            if (movieCount % 50 != 0)                totalPages++;            while (currentPage < totalPages) {                currentPage++;                fetchMovies(currentPage);                progressBar.setVisibility(View.VISIBLE);                progressBarTV.setVisibility(View.VISIBLE);            }            progressBar.setVisibility(View.GONE);            progressBarTV.setVisibility(View.GONE);            Intent intent = new Intent(StarterActivity.this, MainActivity.class);            startActivity(intent);            finish();        }, 2000);    }}